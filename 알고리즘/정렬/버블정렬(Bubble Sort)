▶︎ 정의 : 버블 정렬은 현재 원소와 다음 원소를 비교하여 swap 하는 식의 정렬 알고리즘이다.
  → 원소가 거품처럼 올라오는 듯 하여 버블 정렬이라는 이름이 붙음

▶︎ 버블 정렬 방법 (오름차순)
1. 정렬이 되지 않은 배열의 0번 인덱스부터 선택
2. 선택한 인덱스의 요소와 인접한 다음 요소와 크기 비교
 2-1. 선택한 인덱스 요소보다 인접한 요소가 작다면 swap
 2-2. 선택한 인덱스 요소보다 인접한 요소가 크다면 no swap
3. 선택한 인데스++

예시)
기존값 :   9 2 6 5 1
1번 바꿈 : 2 9 6 5 1
2번 바꿈 : 2 6 9 5 1
3번 바꿈 : 2 6 5 9 1
4번 바꿈 : 2 6 5 1 9
  → 해당 작업을 반복

▶︎ 특징
1. 하나의 배열에서 값을 swap 하는 식으로 동작하기 때문에 공간 복잡도 O(1)이다.
2. 선택 정렬과 마찬가지로 swap시에 필요한 임수 변수 정도의 추가 공간만 있으면 되므로 in-place 정렬이다.
3. 탐색은 (n-1),(n-2),(n-3)...1번 진행 되므로 시간 복잡도는 O(n^2)이다.
4. 버블 정렬은 중복된 키 값의 순서가 정렬 이후에도 유지되므로 stable 정렬이다.


▶︎ 구현 코드
class Sort {
  public void bubbleSortAsc(int[] arr) { //오름차순
    for (int i = 0; i < arr.length; i++) {
      for (int j = 1; j < arr.length - i; j++;) {
        if(arr[j - 1] > arr[j])
          swap(arr, j, j - 1);
      }
    }
  }

  public void bubbleSortDesc(int[] arr) { //내림차순
    for (int i = 0; i < arr.length; i++) {
      for (int j = 1; j < arr.length - i; j++) {
        if (arr[j - 1] < arr[j])
          swap(arr, j, j - 1);
      }
    }
  }

  public void swap(int[] arr, int index1, int index2) {
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
  }
}
