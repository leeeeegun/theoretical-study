▶︎ 정의 : 삽입 정렬은 두번째 원소부터 시작하여 그 앞의 원소들과 비교하여 삽입할 위치를 저장하고,
        원소를 뒤로 옮기고 지ㅣ정 자리에 자료를 삽입하는 정렬 알고리즘이다.

▶︎ 삽입 정렬 방법 (오름차순)
1. 정렬이 되지 않은 배열의 1번 인덱스의 key로 선택
2. 선택한 key보다 낮은 인덱스 위치의 요소와 key 인덱스의 요소 비교
3. key 요소가 들어갈 위치에 삽입
4. key++

▶︎ 특징 
1. 배열 내에서 교환하는 방식이므로 공간 복잡도는 O(1) 이다.
2. 임시 변수 정도의 추가 공간만 필요하므로 in-place 정렬이다.
3. 삽입 정렬은 중복된 키 값의 순서가 정렬 후에도 유지되므로 stable 정렬이다.
4. 시간 복잡도는 O(n^2)이다.
5. 선택 정렬이나 버블 정렬에 비해 상대적 빠르다.


▶︎ 구현 코드
class Sort {
    public void insertionSortAsc(int[] arr) { //오름차순
        for (int i = 1; i < arr.length; i++) {
            int j = i;
            while (j > 0 && arr[j - 1] > arr[j]) {
                swap(arr, j - 1, j);
                j--;
            }
        }
    }

    public void insertionSortDesc(int[] arr) { //내림차순
        for (int i = 1; i < arr.length; i++) {
            int j = i;
            while (j > 0 && arr[j - 1] < arr[j]) {
                swap(arr, j - 1, j);
                j--;
            }
        }
    }

    public void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
}
