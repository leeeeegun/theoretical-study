▶︎ 정의 : 선택정렬은 현재 위치에 들어갈 값을 찾아서 swap 하는 알고리즘

▶︎ 선택 정렬 방법 (오름차순)
1. 정렬이 되지 않은 배열의 0번 인덱스를 선택
2. 선택한 인덱스 이후 요소들중 최소값을 찾음
3. 선택한 인덱스의 요소와 최소값 요소를 swap
4. 인덱스 값 ++

예시)
기존값 :   9 2 6 5 1
1번 바꿈 : 1 2 6 5 9
2번 바꿈 : 1 2 5 6 9

▶︎ 특징
1. 하나의 배열에서 값을 swap 하는 식으로 동작하기 때문에 공간 복잡도 O(1)이다.
2. swap시 임시 변수 하나 공간 정도가 더 필요하기 때문에 in-place 정렬이다.
3. 탐색은 (n-1),(n-2),(n-3)...1번 진행 되므로 시간 복잡도 O(n^2)이다.
4. 중복 키 값이 순서대로 바뀌지 않을 수 있기 때문에 not stable sort이다.


▶︎ 구현 코드
class Sort {
  public void selectionSortAsc(int[] arr) { //오름차순
    int min;
    for (int i = 0; i <arr.length; i++) {
      min = i;
      for (int j = i + 1; j < arrr.length; j++) {
        if (arr[j] < arr[min]) {
          min = j;
        }
      }
      if (min != i) {
        swap(arr, mion, i);
      }
    }
  }

  public void selectionSortDesc(int[] arr) { //내림차순
    int max;
    for (int i = 0; i < arr.length; i++) {
      max = i;
      for (int j = i + 1; j <arr.length; j++) {
        if (arr[j] > arr[max]) {
          max = j;
        }
      }
      if (max != i) {
        sqap(arr, max, i);
      }
    }
  }

  public void swap(int[] arr, int index1, int index2) {
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[inxex2] = temp;
  }
}
