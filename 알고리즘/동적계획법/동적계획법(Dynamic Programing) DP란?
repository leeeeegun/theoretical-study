▶ 정의 : DP란, 하나의 큰 문제를 작은 문제로 나누어 해결하는 기법을 의미한다.
         특정한 알고리즘을 지칭하는 것이 아니라, 기법 그 자체를 의미한다. 같은 DP로 문제를 풀어도 다른 알고리즘을 이용할 수 있다는 의미
  → 복잡한 문제를 여러 개의 간단한 하위 문제로 나누어 푼 다음, 그 해답들을 저장하고 재활용하여 전체 문제의 답을 구하는 알고리즘 설계 기법
    핵심은 반복되는 계산을 줄이는 것에 있다.

▶ 알고리즘 설계 기법과 알고리즘 기법
1. 알고리즘 기법
  → 문제를 해결하기 위해 사용되는 절차적인 방법 또는 계획
    (ex. 정렬 알고리즘, 검색 알고리즘, 그래프 탐색 알고리즘 등)

2. 알고리즘 설계 기법
  → 문제 해결을 위해 알고리즘을 설계하는 방법이나 접근 방식을 나타내며,
    설계 기법은 알고리즘을 개발하고 구현하는 데 사용되는 전략이나 원칙들을 포함
    (ex. 분할 정복, 동적계획법, 탐욕적 알고리즘, 백트래킹 등)

▶ DP는 왜 중요할까?
  → 동적 계획법은 특정 ㅁ누제들이 두 가지 속성을 가질 때 사용할 수 있다.

1. 중복되는 부분 문제(Overlapping Subproblems)
  → 큰 문제를 작은 문제로 나누었을 때, 같은 작은 문제가 여러 번 반복해서 나타나는 경우를 말한다. 예를 들어, 피보나치 수열을
    계산할 때,  fib(5)는 fib(4)와 fib(3)을 필요로 하고, fib(4)는 또다시 fib(3)과 fib(2)를 필요로 한다.
    여기서 fib(3)이 중복해서 계산되는 것을 볼 수 있다. 동적 계획법은 이 fib(3)의 결과를 한 번만 계산한 뒤,
    그 값을 메모이제이션이라는 기법을 통해 저장해두고 필요할 때 마다 꺼내 쓴다.

2. 최적 부분 구조(Optimal Substructure)
  → 전체 문제의 최적의 해결책이 그 하위 문제들의 최적의 해결책들로부터 만들어질 수 있는 구조를 의미한다.
    즉, 부분 문제들의 최적의 답을 조합하면 전체 문제의 최적의 답을 구할 수 있다는 것이다. 예를 들어, 서울에서 부산까지
    가는 최단 경로를 찾는 문제에서 만약 대전을 거쳐간다면, 서울에서 대전까지의 최단 경로와 대전에서 부산까지의 최단 경로를
    합친 것이 전체 최단 경로가 된다.

▶ DP 적용하기
  → DP는 매우 많은 상황에서 적용이 가능하다. 특히 어려운 문제는 침착하게 작은 문제로 나누어 DP를 적용하면 쉽게 풀리기도 한다.

* 그렇다면 DP는 어떻게 적용할까?
1. 먼저 DP로 풀 수 있는 문제를 확인해야 한다. 사실 처음 판별 과정이 제일 힘들다. DP로 풀 수 있는 것을 확인하면 문제는 반 정도 푼
   것을 확인하면 문제는 반 정도 푼 것이나 다름없다. 확인하기 위해서는 앞서 소개한 조건들을 충족하는지를 확인하고, 어떻게 소문제로
   나눌 수 있는지를 생각하면 된다.

2. 다음은 각 소문제들을 나누는 기준인 변수를 정하는 것이다. 피보나치 수의 경우엔 n번째의 n, 격자 관련 문제의 경우 행과 열 
   번호인 i,j 등이다.

3. 마지막으로는 메모이제이션과 초기 조건이다. 비효율적인 재호출을 방지하기 위해 소문제의 결과를 저장해두고, 소문제들의 결과 값
   도출의 기반인 초기 조건을 구해둔다.

4. 앞선 단계들을 완료하면 이제 구현을 하고 몇 몇 값을 대입해 보면서 정상적으로 작동하는지 확인한다.
