▶ 정의 : 메모이제이션이란? 입력값에 대한 결과값을 저장해 둠으로써, 같은 입력값에 따른 함수의 실행이 중복해서 일어나지 않도록 해주는 기법
         DP로 문제를 풀 때 자주 등장하며, 함수의 중복 호출을 방지해 효율을 높여준다.    
  → 프로그래밍에서 계산한 결과를 따로 저장하고 나중에 똑같은 계산을 할 일이 생기면 저장된 값을 가져다 쓰는 최적화된 기법
    이전에 계산했던 걸 또 계산하는 낭비를 줄여서 프로그램 실행 속도를 확 끌어올리는 것이라, '메모'해둔다고 생각하면 이해가 쉽다.

▶ 작동 방법
  → 가장 대표적인 예시가 바로 피보나치 수열
    피보나치 수열은 F(n) = F(n-1) + F(n-2) 라는 식으로 정의
    예를 들어 F(5)를 구하려면 F(4)와 F(3)을 알아야 하고, F(4)를 구하려면 또 F(3)과 F(2)를 알아야 한다.


예시)
  1, 1, 2, 3, 5, 8, 13, ...
  → 앞의 두 수를 더해 다음 수를 구하고 재귀로 구현하면 같은 계산을 계속 반복해 비효율적이다.

  1) 메모이제이션 없이
    def fib(n):
      if n <= 2:
          return 1
      return fib(n-1) + fib(n-2) // 같은 계산을 계속 반복
    → n이 커지면 계산이 너무 느려진다.

  2) 메모이제이션 적용
    memo = {}

    def fib(n):
        if n in memo:          # 이미 계산했다면 바로 재사용
            return memo[n]
        if n <= 2:
            memo[n] = 1
        else:
            memo[n] = fib(n-1) + fib(n-2)
        return memo[n]
    → 한 번 계산한 값은 memo에 저장하고, 다음에 같은 값이 필요하면 바로 꺼내 쓰니까 속도가 훨씬 빨라진다.

▶ 장/단점
  → 장점 : 속도향상 - 중복 계산을 피할 수 있어서 실행 속도가 극적으로 빨라진다. 특히 복잡한 계산이 반복되는 경우 효과가 엄청난다.
          코드의 직관성 - 원래의 로직을 크게 바꾸지 않고, 결과만 저장하는 코드를 추가하는 방식이라 코드를 이해하기 쉽다.

  → 단점 : 메모리 사용 - 계산 결과를 저장해둬야 하니깐 그만큼 메모리를 더 사용하게 된다.
                        저장할 결과가 아주 많아지면 메모리 부족 문제가 생길 수도 있다.
