▶ LATERAL 쿼리란?
▶ 정의 : JOIN의 한 종류이며, JOIN의 오른쪽 테이블(서브쿼리)이 왼쪽 테이블의 컬럼을 참조할 수 있게 해주는 특별한 키워드
          원래 일반적인 JOIN에서는 JOIN 대상이 되는 테이블이나 서브쿼리들이 서로 독립적이어서 다른 테이블의 컬럼을 미리 참조할 수 없다.
          전통적인 JOIN에서는 서브쿼리 내에서 외부 쿼리의 컬럼을 직접 참조할 수 없지만, LATERAL JOIN은 이를 가능케 하여 더욱 유연한 데이터 변환 및 분석이 가능해짐.
  
  → 가장 쉽게 이해하는 방법은 마치 for-each 반복문처럼 동작한다고 생각하는 것이다.
      즉, 왼쪽 테이블의 한 행(row)마다, 그 행의 값을 가지고 오른쪽 서브쿼리를 실행해서 결과를 합치는 것이다.

  → 그럼 이걸 왜 쓸까? 


기본적인 형태)
  → LATERAL은 보통 서브쿼리와 함께 FROM절에 사용된다.
SELECT ...
FROM
    table_A a, --왼쪽 테이블
LATERAL (
    --table_A의 컬럼(a.column)을 사용하는 서브쿼리
    SELECT ...
    FROM table_B b
    WHERE b.some_column = a.column --해당 부분
) subquery_alias; --서브 쿼리 결과에 별명을 붙임

LEFT JOIN LATERAL ... ON true 형태로도 많이 사용하는데, 이렇게 하면 왼쪽 테이블의 행에 대해 서브쿼리 결과가 없더라고
왼쪽 행은 결과에 포함시킬 수 있다 (NULL로 표시됨)

▶ LATERAL 장/단점
  → 장점 : 직관적인 로직 : 생각의 흐름과 쿼리 코드가 거의 일치하여 코드가 직관적이고 이해하기 쉽다.
           유연함 : LATERAL JOIN은 서브쿼리에서 여러 개의 행이나 여러 개의 컬럼을 자유롭게 반환해서 옆에 붙일 수 있다.
           성능 최적화 가능성 : 데이터베이스 종류나 상황에 따라 다르지만, 왼쪽 테이블의 행 수가 적고 오른쪽 서브쿼리가 인덱스를
                               잘 활용할 수 있을 때, 윈도우 함수 같은 다른 방법보다 더 빠를 수 있다.

  → 단점 : 성능 저하 위험 : 반복문처럼 동작하는데 이게 단점이 될 수도 있다. 왼쪽 테이블의 행이 수백만 개라면, 오른쪽 서브쿼리도 
                           수백만 번 실행될 수 있다는 뜻으로 인덱스를 제대로 사용하지 못하면 쿼리 전체가 매우 느려지는 재앙 발생
           낮은 가독성 : 로직은 직관적일 수 있지만 LATERAL 키워드 자체와 SQL을 처음 배우는 사람에게는 생소하고 복잡하게 느껴질 수 있다.
           데이터베이스 호환성 : SQL은 표준 기능이긴 하지만, 모든 데이터베이스 시스템이 지원하지는 않는다.
                                또 지원하더라도 이름이 다를 수 있다. 다른 DB 환경으로 이전할 때 문제가 될 수 있다.


예시)
  → 사용자별 최근 게시글 1개 찾기
    사용자(users) 테이블과 게시글(posts) 테이블이 있다고 한다.

[users]
user_id      user_name
----------------------
1            앨리스
2            밥

[posts]
post_id      user_id      content      created_at
-------------------------------------------------
101          1            첫 글!        2025-09-20
102          2            안녕          2025-09-21
103          1            두 번째 글    2025-09-25

→ 이때 앨리스와 밥의 가장 최근 게시글 1개씩을 가져오고 싶다면?

SELECT
    u.user_name,
    lp.content,
    lp.created_at
FROM
    users u, --1. 먼저 users 테이블에서 한 행(앨리스)을 꺼낸다.
LATERAL (
    --2. 위에서 꺼낸 앨리스의 user_id (u.user_id = 1)를 사용해 이 서브쿼리를 실행한다.
    SELECT p.content, p.created_at
    FROM posts p
    WHERE p.user_id = u.user_id --바깥쪽 u의 user_id를 참조하는 것이 핵심
    ORDER BY p.created_at DESC --최신순으로 정렬
    LIMIT 1 --1개만 가져온다.
) lp; --3. rm 그 결과를 lp라는 별명으로 앨리스 행 옆에 붙인다.
      --4. 다음 행(밥)을 꺼내서 2~3번 과정을 반복한다.

▷ 결과
user_name      content      created_at
----------------------------------------
앨리스          두 번째 글     2025-09-25
밥              안녕          2025-09-21

